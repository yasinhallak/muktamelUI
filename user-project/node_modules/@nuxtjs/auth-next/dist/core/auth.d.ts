import type { AuthOptions, HTTPRequest, HTTPResponse } from '../';
import Storage from './storage';
export default class Auth {
    ctx: any;
    options: AuthOptions;
    strategies: {};
    error: Error;
    private _errorListeners;
    private _redirectListeners;
    private _stateWarnShown;
    private _getStateWarnShown;
    $storage: Storage;
    $state: any;
    constructor(ctx: any, options: any);
    init(): Promise<void>;
    get state(): any;
    getState(key: any): any;
    get strategy(): any;
    registerStrategy(name: any, strategy: any): void;
    setStrategy(name: any): Promise<any>;
    mounted(): Promise<any>;
    loginWith(name: any, ...args: any[]): Promise<any>;
    login(...args: any[]): Promise<any>;
    fetchUser(...args: any[]): Promise<any>;
    logout(): Promise<any>;
    setUserToken(token: any, refreshToken?: any): Promise<any>;
    reset(...args: any[]): any;
    refreshTokens(): Promise<any>;
    get user(): any;
    get loggedIn(): any;
    check(...args: any[]): any;
    fetchUserOnce(...args: any[]): Promise<any>;
    setUser(user: any): void;
    get busy(): any;
    request(endpoint: HTTPRequest, defaults?: HTTPRequest): Promise<HTTPResponse>;
    requestWith(strategy: string, endpoint: HTTPRequest, defaults?: HTTPRequest): Promise<HTTPResponse>;
    wrapLogin(promise: any): Promise<any>;
    onError(listener: any): void;
    callOnError(error: any, payload?: {}): void;
    redirect(name: any, noRouter?: boolean): void;
    onRedirect(listener: any): void;
    callOnRedirect(to: any, from: any): any;
    hasScope(scope: any): boolean;
}
